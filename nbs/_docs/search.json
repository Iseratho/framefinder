[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Frame-Finder",
    "section": "",
    "text": "pip install framefinder"
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "Frame-Finder",
    "section": "",
    "text": "pip install framefinder"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "Frame-Finder",
    "section": "How to use",
    "text": "How to use\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nplt.rcParams['figure.dpi'] = 60\n\n\nfrom framefinder import examples\n\n\nfrom framefinder import framelabels\n\nfl = framelabels.FramingLabels(\"facebook/bart-large-mnli\", examples.candidate_labels)\nres = pd.DataFrame(fl(examples.example_list))\nfl.visualize(res.mean().to_dict(), xerr=res.sem())\nplt.show()\n\n\n\n\n\nfrom framefinder import framedimensions\n\nfd = framedimensions.FramingDimensions(\"all-mpnet-base-v2\", examples.dimensions, examples.pole_names)\nfd.visualize(pd.DataFrame(fd(examples.example_list)))\nplt.show()\n\n\n\n\n\nfrom framefinder import framestructure\n\nfs = framestructure.FramingStructure(\"Iseratho/model_parse_xfm_bart_base-v0_1_0\")\nfs.visualize(fs(examples.example_list))\nplt.show()"
  },
  {
    "objectID": "01_frame_labels.html",
    "href": "01_frame_labels.html",
    "title": "framefinder",
    "section": "",
    "text": "source\n\nFramingLabels\n\n FramingLabels (base_model, candidate_labels, batch_size=16)\n\nInitialize self. See help(type(self)) for accurate signature.\n\nbase_model = \"facebook/bart-large-mnli\"\ncandidate_labels = [\n    \"Economic: costs, benefits, or other financial implications\",\n    \"Capacity and resources: availability of physical, human or financial resources, and capacity of current systems\",\n    \"Morality: religious or ethical implications\",\n    \"Fairness and equality: balance or distribution of rights, responsibilities, and resources\",\n    \"Legality, constitutionality and jurisprudence: rights, freedoms, and authority of individuals, corporations, and government\",\n    \"Policy prescription and evaluation: discussion of specific policies aimed at addressing problems\",\n    \"Crime and punishment: effectiveness and implications of laws and their enforcement\",\n    \"Security and defense: threats to welfare of the individual, community, or nation\",\n    \"Health and safety: health care, sanitation, public safety\",\n    \"Quality of life: threats and opportunities for the individualâ€™s wealth, happiness, and well-being\",\n    \"Cultural identity: traditions, customs, or values of a social group in relation to a policy issue\",\n    \"Public opinion: attitudes and opinions of the general public, including polling and demographics\",\n    \"Political: considerations related to politics and politicians, including lobbying, elections, and attempts to sway voters\",\n    \"External regulation and reputation: international reputation or foreign policy of the U.S.\",\n    \"Other: any coherent group of frames not covered by the above categories\",\n]\n\nexample_list = [\"In 2010, CFCs were banned internationally due to their harmful effect on the ozone layer.\",\n                \"In 2021, doctors prevented the spread of the virus by vaccinating with Pfizer.\",\n                \"We must fight for our freedom.\",\n                \"The government prevents our freedom.\",\n                \"They prevent the spread.\",\n                \"We fight the virus.\",\n                \"I believe that we should act now.\\nThere is no time to waste.\",\n                ]\n\nframing_label_model = FramingLabels(base_model, candidate_labels)\nassert type(framing_label_model(example_list[0])) == dict\nassert type(framing_label_model(example_list)) == dict\ntest_labels = framing_label_model(example_list)\n\ntest_labels_df = pd.DataFrame(test_labels)\nimport matplotlib.ticker as mticker\n_, ax = framing_label_model.visualize(test_labels_df.mean().to_dict(), xerr=test_labels_df.sem(), log=\"True\")\nax.xaxis.set_major_formatter(mticker.ScalarFormatter())\nplt.xticks([0.1, 0.5, 1])\nplt.title(\"Example Frame Lables\")\nplt.axvline(0.5, color=\"red\")\n\n  0%|                                                                                                                                                                                                                              | 0/7 [00:00&lt;?, ?it/s]100%|##################################################################################################################################################################################################################| 7/7 [00:00&lt;00:00, 150564.76it/s]\n  0%|                                                                                                                                                                                                                              | 0/7 [00:00&lt;?, ?it/s]100%|##################################################################################################################################################################################################################| 7/7 [00:00&lt;00:00, 170698.42it/s]\n&lt;ipython-input-1-085c9ab13522&gt;:55: UserWarning: Attempt to set non-positive xlim on a log-scaled axis will be ignored.\n  plt.xlim(left=0)\n\n\n&lt;matplotlib.lines.Line2D at 0x7f6e1bd9d900&gt;"
  },
  {
    "objectID": "02_frame_dimensions.html",
    "href": "02_frame_dimensions.html",
    "title": "framefinder",
    "section": "",
    "text": "source\n\nFramingDimensions\n\n FramingDimensions (base_model, dimensions, pole_names)\n\nInitialize self. See help(type(self)) for accurate signature.\n\nbase_model = 'all-mpnet-base-v2'\ndimensions = [\n    \"Care: ...acted with kindness, compassion, or empathy, or nurtured another person.\",\n    \"Harm: ...acted with cruelty, or hurt or harmed another person/animal and caused suffering.\",\n    \"Fairness: ...acted in a fair manner, promoting equality, justice, or rights.\",\n    \"Cheating: ...was unfair or cheated, or caused an injustice or engaged in fraud.\",\n    \"Loyalty: ...acted with fidelity, or as a team player, or was loyal or patriotic.\",\n    \"Betrayal: ...acted disloyal, betrayed someone, was disloyal, or was a traitor.\",\n    \"Authority: ...obeyed, or acted with respect for authority or tradition.\",\n    \"Subversion: ...disobeyed or showed disrespect, or engaged in subversion or caused chaos.\",\n    \"Sanctity: ...acted in a way that was wholesome or sacred, or displayed purity or sanctity.\",\n    \"Degredation: ...was depraved, degrading, impure, or unnatural.\",\n]\npole_names = [\n    (\"Care\", \"Harm\"), \n    (\"Fairness\", \"Cheating\"),\n    (\"Loyalty\", \"Betrayal\"),\n    (\"Authority\", \"Subversion\"),\n    (\"Sanctity\", \"Degredation\"),\n]\n\nexample_list = [\"In 2010, CFCs were banned internationally due to their harmful effect on the ozone layer.\",\n                \"In 2021, doctors prevented the spread of the virus by vaccinating with Pfizer.\",\n                \"We must fight for our freedom.\",\n                \"The government prevents our freedom.\",\n                \"They prevent the spread.\",\n                \"We fight the virus.\",\n                \"I believe that we should act now.\\nThere is no time to waste.\",\n                ]\n\nframing_dimen_model = FramingDimensions(base_model, dimensions, pole_names)\nassert type(framing_dimen_model(example_list[0])) == dict\nassert type(framing_dimen_model(example_list)) == dict\ntest_dimens = framing_dimen_model(example_list)\ntest_dimens\n\n{('Care',\n  'Harm'): array([-0.15387589,  0.10037182, -0.06937939, -0.16903251, -0.0124326 ,\n         0.10496716,  0.09917428], dtype=float32),\n ('Fairness',\n  'Cheating'): array([-0.10247803,  0.03238375,  0.09528822,  0.06894703,  0.05423794,\n        -0.00429548,  0.06256694], dtype=float32),\n ('Loyalty',\n  'Betrayal'): array([-0.03953579,  0.08804406,  0.03784094, -0.05983147,  0.04533485,\n         0.06750815, -0.03902258], dtype=float32),\n ('Authority',\n  'Subversion'): array([-0.07708085, -0.04315241, -0.05131513, -0.00762892,  0.08650668,\n        -0.09983855,  0.05713998], dtype=float32),\n ('Sanctity',\n  'Degredation'): array([-0.12603989,  0.06127246,  0.05510061, -0.06018388,  0.00770774,\n         0.01998245,  0.05198321], dtype=float32)}\n\n\n\ntest_dimens_df = pd.DataFrame(test_dimens)\ng = framing_dimen_model.visualize(test_dimens_df);\ng.axes[0].set_axisbelow(True)\ng.axes[0].yaxis.grid(color='gray', linestyle='dashed')"
  },
  {
    "objectID": "03_frame_structure.html",
    "href": "03_frame_structure.html",
    "title": "framefinder",
    "section": "",
    "text": "source\n\nFramingStructure\n\n FramingStructure (base_model, roles=None)\n\nInitialize self. See help(type(self)) for accurate signature.\n\nbase_model = \"Iseratho/model_parse_xfm_bart_base-v0_1_0\"\nframing_struc_model = FramingStructure(base_model)\n\nexample_list = [\"In 2010, CFCs were banned internationally due to their harmful effect on the ozone layer.\",\n                \"In 2021, doctors prevented the spread of the virus by vaccinating with Pfizer.\",\n                \"We must fight for our freedom.\",\n                \"The government prevents our freedom.\",\n                \"They prevent the spread.\",\n                \"We fight the virus.\",\n                \"I believe that we should act now.\\nThere is no time to waste.\",\n                ]\n\nframing_struc_model = FramingStructure(base_model)\nassert type(framing_struc_model(example_list[0])) == list\nassert type(framing_struc_model(example_list)) == list\ntest_struct = framing_struc_model(example_list)\ntest_struct\n\n[&lt;Graph object (top=ban-01) at 140703003308432&gt;,\n &lt;Graph object (top=prevent-01) at 140703003297632&gt;,\n &lt;Graph object (top=obligate-01) at 140703003308672&gt;,\n &lt;Graph object (top=prevent-01) at 140703003297392&gt;,\n &lt;Graph object (top=prevent-01) at 140703003307616&gt;,\n &lt;Graph object (top=fight-01) at 140703003297584&gt;,\n &lt;Graph object (top=multi-sentence) at 140703003308144&gt;]\n\n\n\nframing_struc_model.visualize(test_struct, min_node_threshold=3);\n\n/home/iseratho/mambaforge/envs/ds2/lib/python3.10/site-packages/pygraphviz/agraph.py:1407: RuntimeWarning: Warning: r is not a known color.\nWarning: k is not a known color.\nWarning: y is not a known color.\nWarning: b is not a known color.\nWarning: g is not a known color.\n\n  warnings.warn(b\"\".join(errors).decode(self.encoding), RuntimeWarning)"
  }
]